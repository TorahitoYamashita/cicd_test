name: Dev to Staging Release

on:
  workflow_dispatch:
    # inputs:
    #   weeklyReleaseNumber:
    #     description: 'Number of the release of the week'
    #     required: true
    #   versionBump:
    #     description: |
    #       How would you like to bump the version?
    #       major (2.0.0) |
    #       minor (1.2.0) |
    #       patch (1.1.1) |
    #       pre-release major (2.0.0-beta.1) |
    #       pre-release minor (1.2.0-beta.1) |
    #       pre-release patch (1.1.1-beta.1) |
    #       pre-release (1.1.1-beta.1)
    #     required: true  

jobs:  
  Create_Staging_Release_PR:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: staging

      - name: Read Manifest File
        id: package
        uses: juliangruber/read-file-action@v1
        with:
          path: ./manifest
      - name: Echo package.json
        run: echo "${{ steps.package.outputs.content }}"
      - name: Echo package.json
        run: |
          IFS='.' read -ra ADDR <<< ${{ steps.package.outputs.content }}
          for i in "${ADDR[@]}"; do
            Echo "$i"
          done

      - name: Prepare BRANCH_NAME and PR_TITLE
        id: vars
        run: |
          YEAR_AND_WEEK="$(date +"%y.%U.")"
          VERSION=${YEAR_AND_WEEK}${{ github.event.inputs.weeklyReleaseNumber }}
          export BRANCH_NAME BRANCH_NAME="rel/${VERSION}"
          export PR_TITLE PR_TITLE="chore: release ${VERSION}"
          echo ::set-output name=branch_name::${BRANCH_NAME}
          echo ::set-output name=pr_title::${PR_TITLE}

      - name: Reset Promotion Branch
        run: |
          git fetch origin dev:dev
          git reset --hard dev

      - name: Bump Version and Add Change Log
        run: |
          npm i -g @jsdevtools/version-bump-prompt
          bump ${{ github.event.inputs.versionBump }}
          npm i -g conventional-changelog-cli
          conventional-changelog -p angular -i CHANGELOG.md -s
          
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.PAT }}
          title: ${{ steps.vars.outputs.pr_title }}
          body: ${{ steps.vars.outputs.pr_title }}
          commit-message: ${{ steps.vars.outputs.pr_title }}
          branch: ${{ steps.vars.outputs.branch_name }}
          delete-branch: true
          base: staging
          assignees: ${{ github.actor }}
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>

      - name: Slack Notification
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: |
            {
              "url": "${{ steps.cpr.outputs.pull-request-url }}",
              "what_pr": "Dev to Staging release",
              "operation": "${{ steps.cpr.outputs.pull-request-operation }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - id: automerge
      #   name: automerge
      #   uses: "pascalgn/automerge-action@v0.15.3"
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PULL_REQUEST: ${{ steps.cpr.outputs.pull-request-number }}

      # - name: feedback
      #   if: ${{ steps.automerge.outputs.mergeResult }} == "merged"
      #   run: |
      #     echo "Pull request ${{ steps.automerge.outputs.pullRequestNumber }} merged!"
          
      # - name: Pull Request Automerge
      #   if: steps.cpr.outputs.pull-request-operation == 'created'
      #   uses: peter-evans/enable-pull-request-automerge@v2
      #   with:
      #     token: ${{ secrets.PAT }}
      #     pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
      
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"

      - name: Dump steps context
        id: stepssss
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"

      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"          

      - name: Testingggg
        run: |
          echo ${{ toJson(steps.stepssss.outputs) }}
          echo "$STEPS_CONTEXT"

  Create_Sync_Dev_PR:
    uses: ./.github/workflows/sync-dev.yml
    with:
      version_bump: ${{ github.event.inputs.versionBump }}
    secrets: inherit

