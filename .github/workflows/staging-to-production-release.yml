name: Staging to Production Release

on:
  workflow_dispatch:
    inputs:
      weeklyReleaseNumber:
        description: 'Number of the release of the week'
        required: true

jobs:  
  Create_Production_Release_PR:
    runs-on: ubuntu-latest

    outputs:
      output2: ${{ steps.vars.outputs.tag }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
        
      - name: Prepare TAG and PR_TITLE
        id: vars
        run: |
          YEAR_AND_WEEK="$(date +"%y.%U.")"
          VERSION=${YEAR_AND_WEEK}${{ github.event.inputs.weeklyReleaseNumber }}
          export PR_TITLE PR_TITLE="chore: release ${VERSION}"
          export TAG TAG="v${VERSION}"
          echo ::set-output name=pr_title::${PR_TITLE}
          echo "::set-output name=tag::${TAG}"

      - name: Reset Promotion Branch
        run: |
          git fetch origin staging:staging
          git reset --hard staging

      - name: Create Tag
        run: |
          git tag ${{ steps.vars.outputs.tag }}
          git push --tags

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.PAT }}
          title: ${{ steps.vars.outputs.pr_title }}
          body: ${{ steps.vars.outputs.pr_title }}
          commit-message: ${{ steps.vars.outputs.pr_title }}
          # branch: ${{ steps.vars.outputs.branch_name }}
          delete-branch: true
          base: main
          assignees: ${{ github.actor }}
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>

      - name: Slack Notification
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: |
            {
              "url": "${{ steps.cpr.outputs.pull-request-url }}",
              "what_pr": "Staging to Production release",
              "operation": "${{ steps.cpr.outputs.pull-request-operation }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      # - name: Enable Pull Request Automerge
      #   id: mergeeeee
      #   if: steps.cpr.outputs.pull-request-operation == 'created'
      #   uses: peter-evans/enable-pull-request-automerge@v2
      #   with:
      #     token: ${{ secrets.PAT }}
      #     pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
      
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"

      - name: Dump steps context
        id: stepssss
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"

      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  # release:
  #   runs-on: ubuntu-latest
  #   needs: Create_Production_PR
  #   steps:
  #     - name: Kore
  #       run: |
  #         echo ${{ needs.Create_Production_PR.outputs.output1 }}
  #         echo ${{ needs.Create_Production_PR.outputs.output2 }}
  #     - uses: actions/checkout@v3

  #     - name: Create GitHub release
  #       uses: Roang-zero1/github-create-release-action@v2
  #       with:
  #         version_regex: ^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+
  #         release_title: ${{ needs.Create_Production_PR.outputs.output2 }}
  #         release_text: ${{ needs.Create_Production_PR.outputs.output2 }}
  #         created_tag: ${{ needs.Create_Production_PR.outputs.output2 }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.PAT }}

